# serilizer.py
from .utils import code_generator
from .models import  Workschedule, CustomerFormControl,
                     CustomerClass, RewardPolicy, RedeemPolicy, Diagnosis, DiagnosisCompare, Securitylevellist,
                     DailysalesdataDetail, DailysalesdataSummary



class CustomerClassSerializer(serializers.ModelSerializer):
    class Meta:
        model= CustomerClass
        fields = ["id","class_desc","class_code"]


class CustomerPlusSerializer(serializers.ModelSerializer):

    id = serializers.IntegerField(source='pk',required=False)
    gender = serializers.CharField(source='Cust_sexesid.itm_name',required=False)
    site_name = serializers.CharField(source='Site_Codeid.itemsite_desc',required=False)
    class_name = serializers.CharField(source='Cust_Classid.class_desc',required=False)
    custClass = CustomerClassSerializer(source="Cust_Classid",read_only=True)
    masked_nric = serializers.SerializerMethodField()

    def get_masked_nric(self,obj):
        _nric = obj.cust_nric if obj.cust_nric else ""
        if len(_nric) > 4:
            _str = '*' * (len(_nric) - 4)
            _nric = _str + _nric[-4:]
        return _nric

    def to_representation(self, data):
        data = super(CustomerPlusSerializer,self).to_representation(data)
        data['cust_nric'] = data.get("masked_nric")

        return data

    class Meta:
        model = Customer
        fields = ['id','cust_code','cust_name','cust_address','Site_Codeid','site_name','site_code','last_visit',
                  'custClass', 'class_name', 'Cust_Classid', 'cust_joindate','Cust_Sourceid','cust_nric',
                  'upcoming_appointments','cust_dob','cust_phone2','cust_phone1','Cust_sexesid',
                  'gender',
                  'masked_nric',
                  'cust_email',
                  'prepaid_card','cust_occupation', 'creditnote','voucher_available','oustanding_payment','cust_refer',
                  'custallowsendsms','cust_maillist','cust_title']
        read_only_fields = ('cust_isactive','created_at', 'updated_at','last_visit','upcoming_appointments',
        'Site_Code','cust_code','ProneToComplain')
        extra_kwargs = {'cust_name': {'required': True},'cust_address':{'required': True}}


    def validate(self, data):
        request = self.context['request']

        action = self.context.get('action')

        # customer form settings validation
        fmspw = Fmspw.objects.filter(user=request.user, pw_isactive=True)
        site = fmspw[0].loginsite
        form_control_qs = CustomerFormControl.objects.filter(isActive=True,Site_Codeid=site)
        allowed_fields = []

        # if action == "list":
        #     allowed_fields = form_control_qs.filter(visible_in_listing=True).values_list("field_name",flat=True)
        # elif action == "retrieve":
        #     allowed_fields = form_control_qs.filter(visible_in_profile=True).values_list("field_name",flat=True)
        # if action == "create":
        #     allowed_fields = form_control_qs.filter(visible_in_registration=True) #.values_list("field_name",flat=True)
        #
        validate_data = {}
        if action == "update":
            allowed_fields = form_control_qs.filter(visible_in_registration=True).values_list("field_name",flat=True)
        elif action == 'create':
            allowed_fields = form_control_qs.filter(visible_in_registration=True).values_list("field_name",flat=True)


        for f in allowed_fields:
            if hasattr(Customer,f) and f in data:
                validate_data[f] = data[f]


        mandatory_fields = form_control_qs.filter(mandatory=True).values_list("field_name", flat=True)

        for _field in mandatory_fields:
            # if request.data.get(_field) is None:
            if validate_data.get(_field) is None:
                raise serializers.ValidationError(f"{_field} Field is required.")


        # if not 'cust_name' in request.data:
        #     raise serializers.ValidationError("cust_name Field is required.")
        # else:
        #     if request.data['cust_name'] is None:
        #         raise serializers.ValidationError("cust_name Field is required.")
        # # if not 'cust_address' in request.data:
        # #     raise serializers.ValidationError("cust_address Field is required.")
        # # else:
        # #     if request.data['cust_address'] is None:
        # #         raise serializers.ValidationError("cust_address Field is required.")
        # # if not 'cust_dob' in request.data:
        # #     raise serializers.ValidationError("cust_dob Field is required.")
        # # else:
        # #     if request.data['cust_dob'] is None:
        # #         raise serializers.ValidationError("cust_dob Field is required.")
        # if not 'cust_phone2' in request.data:
        #     raise serializers.ValidationError("cust_phone2 Field is required.")
        # else:
        #     if request.data['cust_phone2'] is None:
        #         raise serializers.ValidationError("cust_phone2 Field is required.")
        # if not 'Cust_sexesid' in request.data:
        #     raise serializers.ValidationError("Cust_sexesid Field is required.")
        # else:
        #     if request.data['Cust_sexesid'] is None:
        #         raise serializers.ValidationError("Cust_sexesid Field is required.")
        # if not 'Site_Codeid' in request.data:
        #     raise serializers.ValidationError("Site_Codeid Field is required.")
        # else:
        #     if request.data['Site_Codeid'] is None:
        #         raise serializers.ValidationError("Site_Codeid Field is required.")

        if 'Cust_sexesid' in data:
            if data['Cust_sexesid'] is not None:
                if Gender.objects.filter(pk=data['Cust_sexesid'].pk,itm_isactive=False):
                    raise serializers.ValidationError("Gender ID Does not exist!!")

                if not Gender.objects.filter(pk=data['Cust_sexesid'].pk,itm_isactive=True):
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Gender Id does not exist!!",'error': True}
                    raise serializers.ValidationError(result)
        if 'Site_Codeid' in data:
            if data['Site_Codeid'] is not None:
                if ItemSitelist.objects.filter(pk=data['Site_Codeid'].pk,itemsite_isactive=False):
                    raise serializers.ValidationError("Site Code ID Does not exist!!")
                if not ItemSitelist.objects.filter(pk=data['Site_Codeid'].pk,itemsite_isactive=True):
                    raise serializers.ValidationError("Site Code ID Does not exist!!")

        # if not 'cust_maillist' in request.data:
        #     raise serializers.ValidationError("cust_maillist Field is required.")
        # else:
        #     if request.data['cust_maillist'] is None:
        #         raise serializers.ValidationError("cust_maillist Field is required.")
        # if not 'custallowsendsms' in request.data:
        #     raise serializers.ValidationError("custallowsendsms Field is required.")
        # else:
        #     if request.data['custallowsendsms'] is None:
        #         raise serializers.ValidationError("custallowsendsms Field is required.")
        # Email and Mobile number validation
        # if request.data['cust_email']:
        #     customer_mail =  Customer.objects.filter(cust_email=request.data['cust_email'])
        #     if len(customer_mail) > 0:
        #         raise serializers.ValidationError("Email id is already associated with another account")
        # customer =  Customer.objects.filter(cust_phone2=request.data['cust_phone2'])
        # if len(customer) > 0:
        #     raise serializers.ValidationError("Mobile number is already associated with another account")
        return validate_data

    # def update(self, instance, validated_data):
    #     update_fields = form_control_qs.filter(mandatory=True).values_list("field_name",flat=True)

class StaffPlusSerializer(serializers.ModelSerializer):
    """
    most parts are identical to EmployeeSerializer. validation little bit different.
    use for StaffPlus APIs.
    TODO:   should be figure out a way to use same serializer (EmployeeSerializer) to both old stadd apis and
            staff plus apis without any conflicts.
    """
    id = serializers.IntegerField(source='pk',required=False)
    services =  serializers.SerializerMethodField()
    gender = serializers.CharField(source='Emp_sexesid.itm_name',required=False)
    jobtitle_name = serializers.CharField(source='EMP_TYPEid.level_desc',required=False)
    shift_name = serializers.SerializerMethodField()
    level_desc = serializers.CharField(source='LEVEL_ItmIDid.level_description',required=False)
    site_name = serializers.CharField(source='defaultSiteCodeid.itemsite_desc',required=False)
    # fmspw fields
    flgsales =  serializers.SerializerMethodField()
    flgappt =  serializers.SerializerMethodField()


    def get_shift_name(self, obj):
        if obj.shift:
            att = obj.shift
            return str(att.attn_time) +" "+ "to" +" "+str(att.attn_mov_in)
        else:
            return None

    def get_services(self, obj):
        if obj.skills.all():
            string = ""
            for i in obj.skills.all():
                if string == "":
                    string = string + i.item_desc
                elif not string == "":
                    string = string +","+ i.item_desc
            return string
        else:
            return None

    def get_flgsales(self,obj):
        fmspw = Fmspw.objects.filter(Emp_Codeid=obj).first()
        return fmspw.flgsales

    def get_flgappt(self,obj):
        fmspw = Fmspw.objects.filter(Emp_Codeid=obj).first()
        return fmspw.flgappt


    class Meta:
        model = Employee
        fields = ['id','skills_list','emp_name','display_name','emp_phone1','emp_code','skills','services','flgsales','flgappt',
                  'emp_address', 'Emp_sexesid','gender','defaultSiteCodeid','defaultsitecode','site_name',
                  'Site_Codeid','site_code', 'emp_dob','emp_joindate','shift','shift_name','emp_email','emp_pic',
                  'EMP_TYPEid','jobtitle_name', 'is_login','pw_password','LEVEL_ItmIDid','level_desc','emp_isactive',
                  "emp_nric","max_disc", 'emp_race', 'Emp_nationalityid', 'Emp_maritalid', 'Emp_religionid', 'emp_emer',
                  'emp_emerno', 'emp_country', 'emp_remarks','show_in_trmt','show_in_appt','show_in_sales']
        read_only_fields = ('updated_at','created_at','emp_code','branch')
        extra_kwargs = {
            'emp_email': {'required': False},
            'Site_Codeid': {'required': False},
            'emp_name': {'required': True},
        }


    def validate(self, data):
        """ validation for StaffPlusSerializer"""
        request = self.context['request']
        mandatory_list = ['emp_name','emp_isactive','display_name','max_disc','emp_joindate']
        for _field in mandatory_list:
            if not request.data.get(_field):
                raise serializers.ValidationError(f"{_field} Field is required.")


        # if 'skills_list' in data:
        #     if data['skills_list'] is not None:
        #         if ',' in data['skills_list']:
        #             res = data['skills_list'].split(',')
        #         else:
        #             res = data['skills_list'].split(' ')
        #         for t in res:
        #             id_val = int(t)
        #             if Stock.objects.filter(pk=id_val,item_isactive=False):
        #                 raise serializers.ValidationError("Services ID Does not exist!!")
        #
        #             if not Stock.objects.filter(pk=id_val,item_isactive=True):
        #                 raise serializers.ValidationError("Services ID Does not exist!!")


        # if 'Emp_sexesid' in data:
        #     if data['Emp_sexesid'] is not None:
        #         if Gender.objects.filter(pk=data['Emp_sexesid'].pk,itm_isactive=False):
        #             raise serializers.ValidationError("Gender ID Does not exist!!")
        #         if not Gender.objects.filter(pk=data['Emp_sexesid'].pk,itm_isactive=True):
        #             raise serializers.ValidationError("Gender ID Does not exist!!")


        if 'shift' in data:
            if data['shift'] is not None:
                if Attendance2.objects.filter(pk=data['shift'].pk):
                    raise serializers.ValidationError("Shift ID Does not exist!!")
                if not Attendance2.objects.filter(pk=data['shift'].pk):
                    raise serializers.ValidationError("Shift ID Does not exist!!")


        if 'Site_Codeid' in data:
            if data['Site_Codeid'] is not None:
                if ItemSitelist.objects.filter(pk=data['Site_Codeid'].pk,itemsite_isactive=False):
                    raise serializers.ValidationError("Branch ID Does not exist!!")
                if not ItemSitelist.objects.filter(pk=data['Site_Codeid'].pk,itemsite_isactive=True):
                    raise serializers.ValidationError("Branch ID Does not exist!!")



        if 'defaultSiteCodeid' in data:
            if data['defaultSiteCodeid'] is not None:
                if ItemSitelist.objects.filter(pk=data['defaultSiteCodeid'].pk,itemsite_isactive=False):
                    raise serializers.ValidationError("Branch ID Does not exist!!")
                if not ItemSitelist.objects.filter(pk=data['defaultSiteCodeid'].pk,itemsite_isactive=True):
                    raise serializers.ValidationError("Branch ID Does not exist!!")


        if 'EMP_TYPEid' in data:
            if data['EMP_TYPEid'] is not None:
                if EmpLevel.objects.filter(id=data['EMP_TYPEid'].id,level_isactive=False):
                    raise serializers.ValidationError("Job Title ID Does not exist!!")
                if not EmpLevel.objects.filter(id=data['EMP_TYPEid'].id,level_isactive=True):
                    raise serializers.ValidationError("Job Title ID Does not exist!!")

        return data

    def create(self, validated_data):
        fmspw = Fmspw.objects.filter(user=self.context['request'].user,pw_isactive=True).first()
        Site_Codeid = fmspw.loginsite
        site_code_str = str(Site_Codeid.itemsite_code)
        siteobj = ItemSitelist.objects.filter(pk=validated_data.get('defaultSiteCodeid').pk,itemsite_isactive=True).first()
        employee = Employee.objects.create(emp_name=validated_data.get('emp_name'),
                                           emp_phone1=validated_data.get('emp_phone1'),
                                           display_name=validated_data.get('display_name'),
                                           emp_address=validated_data.get('emp_address'),
                                           Emp_sexesid=validated_data.get('Emp_sexesid'),
                                           emp_dob=validated_data.get('emp_dob'),
                                           emp_joindate=validated_data.get('emp_joindate'),
                                           shift=validated_data.get('shift'),
                                           defaultSiteCodeid=validated_data.get('defaultSiteCodeid'),
                                           defaultsitecode=siteobj.itemsite_code,
                                           emp_pic=validated_data.get('emp_pic'),
                                           is_login=validated_data.get('is_login'),
                                           EMP_TYPEid=validated_data.get('EMP_TYPEid'),
                                           emp_isactive=validated_data.get('emp_isactive'),
                                           emp_nric=validated_data.get('emp_nric'),
                                           max_disc=validated_data.get('max_disc'),
                                           show_in_sales=validated_data.get('show_in_sales'),
                                           show_in_appt=validated_data.get('show_in_appt'),
                                           show_in_trmt=validated_data.get('show_in_trmt'),
                                           Site_Codeid=Site_Codeid,
                                           site_code=site_code_str)

        # skills_data = validated_data.pop('skills_list')
        # if ',' in skills_data:
        #     res = skills_data.split(',')
        # else:
        #     res = skills_data.split(' ')
        # for skill in res:
        #     employee.skills.add(skill)
        return employee

    def update(self, instance, validated_data):
        request = self.context['request']
        instance.emp_name = validated_data.get("emp_name", instance.emp_name)
        instance.display_name = validated_data.get("display_name", instance.display_name)
        instance.emp_phone1 = validated_data.get("emp_phone1", instance.emp_phone1)
        instance.emp_address = validated_data.get("emp_address", instance.emp_address)
        instance.Emp_sexesid = validated_data.get("Emp_sexesid", instance.Emp_sexesid)
        instance.emp_dob = validated_data.get("emp_dob", instance.emp_dob)
        instance.emp_joindate = validated_data.get("emp_joindate", instance.emp_joindate)
        instance.shift = validated_data.get("shift", instance.shift)
        instance.emp_pic = validated_data.get("emp_pic", instance.emp_pic)
        instance.EMP_TYPEid = validated_data.get("EMP_TYPEid", instance.EMP_TYPEid)
        instance.defaultSiteCodeid = validated_data.get("defaultSiteCodeid", instance.defaultSiteCodeid)
        instance.defaultsitecode = instance.defaultSiteCodeid.itemsite_code
        instance.Site_Codeid = validated_data.get("Site_Codeid", instance.Site_Codeid)
        instance.emp_nric = validated_data.get("emp_nric", instance.emp_nric)
        instance.max_disc = validated_data.get("max_disc", instance.max_disc)
        instance.site_code = instance.Site_Codeid.itemsite_code,
        # fields that have defaults value in model, are returning default val in validated_data
        # ether request does or doesn't have it.
        instance.emp_isactive = request.data.get("emp_isactive", instance.emp_isactive)
        instance.show_in_sales = request.data.get("show_in_sales",instance.show_in_sales)
        instance.show_in_appt = request.data.get("show_in_appt", instance.show_in_appt)
        instance.show_in_trmt = request.data.get("show_in_trmt", instance.show_in_trmt)

        if 'emp_email' in validated_data:
            if validated_data['emp_email'] is not None:
                instance.emp_email = validated_data.get("emp_email", instance.emp_email)


        instance.save()

        # _Fmspw = Fmspw.objects.filter(Emp_Codeid=instance).first()
        # if _Fmspw:
        #     _Fmspw.flgsales =  instance.show_in_sales
        #     _Fmspw.flgappt =  instance.show_in_appt
        #     _Fmspw.save()

        return instance

class SkillSerializer(serializers.ModelSerializer):
    # Item_Class = serializers.CharField(source='Item_Classid.itm_desc',required=False)

    class Meta:
        model = Stock
        fields = ['item_no','item_desc','item_name','item_price','item_code']
        read_only_fields = ('item_code','item_no')

class EmpInfoSerializer(serializers.ModelSerializer):
    id = serializers.IntegerField(source='pk', required=False)
    # site_id = serializers.SerializerMethodField()

    class Meta:
        model = Employee
        fields = ['id', 'emp_code', 'emp_name',
                  'emp_phone1','emp_address','Emp_sexesid','emp_race','Emp_nationalityid','Emp_maritalid','Emp_religionid',
                  'emp_emer','emp_emerno','emp_country','emp_remarks','show_in_sales','show_in_appt','show_in_trmt']
        # extra_kwargs = {'site_id': {'required': False}}

    def validate(self, data):
        request = self.context['request']
        # if not 'site_id' in request.data:
        #     raise serializers.ValidationError("site_id Field is required.")
        # else:
        #     if request.data['site_id'] is None:
        #         raise serializers.ValidationError("site_id Field is required!!")

        return data

    def update(self, instance, validated_data):
        instance.emp_phone1 = validated_data.get("emp_phone1", instance.emp_phone1)
        instance.emp_address = validated_data.get("emp_address", instance.emp_address)
        instance.Emp_sexesid = validated_data.get("Emp_sexesid", instance.Emp_sexesid)
        instance.Emp_nationalityid = validated_data.get("Emp_nationalityid", instance.Emp_nationalityid)
        instance.Emp_maritalid = validated_data.get("Emp_maritalid", instance.Emp_maritalid)
        instance.Emp_religionid = validated_data.get("Emp_religionid", instance.Emp_religionid)
        instance.emp_emer = validated_data.get("emp_emer", instance.emp_emer)
        instance.emp_emerno = validated_data.get("emp_emerno", instance.emp_emerno)
        instance.emp_remarks = validated_data.get("emp_remarks", instance.emp_remarks)
        instance.emp_country = validated_data.get("emp_country", instance.emp_country)
        instance.emp_race = validated_data.get("emp_race", instance.emp_race)


        # todo:
        #   country, emergancy person, emergncy contact number
        instance.save()
        return instance

class EmpWorkScheduleSerializer(serializers.ModelSerializer):
    class Meta:
        model = Workschedule
        fields = ['id','monday','tuesday','wednesday','thursday','friday','saturday','sunday','emp_code']
        read_only_fields = ('updated_at', 'created_at', 'emp_code')

    def validate(self, data):
        request = self.context['request']
        print("req",data)
        return data


    # def update(self, validated_data):

        # work_schedule = Workschedule.objects.create(emp_code=self.emp.emp_code,
        #                                             monday=validated_data.get('monday'),
        #                                             tuesday=validated_data.get('tuesday'),
        #                                             wednesday=validated_data.get('wednesday'),
        #                                             thursday=validated_data.get('thursday'),
        #                                             friday=validated_data.get('friday'),
        #                                             saturday=validated_data.get('saturday'),
        #                                             sunday=validated_data.get('sunday'),
        #                                             name=self.emp.emp_name,
        #                                             )
    def update(self, instance, validated_data):
        print(validated_data)
        instance.monday = validated_data.get('monday',instance.monday)
        instance.tuesday = validated_data.get('tuesday',instance.tuesday)
        instance.wednesday = validated_data.get('wednesday',instance.tuesday)
        instance.thursday = validated_data.get('thursday',instance.tuesday)
        instance.friday = validated_data.get('friday',instance.tuesday)
        instance.saturday = validated_data.get('saturday',instance.tuesday)
        instance.sunday = validated_data.get('sunday',instance.tuesday)

        instance.save()
        return instance


class CustomerFormControlSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomerFormControl
        fields = ['id','field_name','display_field_name','visible_in_registration', 'visible_in_listing','visible_in_profile','mandatory','order','col_width']
        read_only_fields = ('field_name','display_field_name')

class RewardPolicySerializer(serializers.ModelSerializer):
    class Meta:
        model = RewardPolicy
        fields = '__all__'
        read_only_fields = ('reward_code',)

    def create(self, validated_data):
        reward = RewardPolicy(**validated_data)
        reward.reward_code = code_generator(size=6)
        reward.save()

        return reward




class RedeemPolicySerializer(serializers.ModelSerializer):
    class Meta:
        model = RedeemPolicy
        fields = '__all__'
        read_only_fields = ('redeem_code',)

    def create(self, validated_data):
        redeem = RedeemPolicy(**validated_data)
        redeem.redeem_code = code_generator(size=6)
        redeem.save()
        return redeem



class DiagnosisSerializer(serializers.ModelSerializer):
    class Meta:
        model = Diagnosis
        fields = ['sys_code','diagnosis_date','remarks','date_pic_take','cust_name','cust_code','diagnosis_code','pic_path','cust_no']
        read_only_fields = ("diagnosis_code","cust_code",)
        extra_kwargs = {'diagnosis_code': {'required': False},
                        'cust_code': {'required': False},
                        'pic_path': {'required': True},
                        'remark1': {'required': True},
                        'diagnosis1_id': {'required': True},
                        'diagnosis2_id': {'required': True},
                        }

    # def validate(self, attrs):
    #     return attrs

class DiagnosisCompareSerializer(serializers.ModelSerializer):
    diagnosis1 = DiagnosisSerializer(source='diagnosis1_id')
    diagnosis2 = DiagnosisSerializer(source='diagnosis2_id')
    class Meta:
        model = DiagnosisCompare
        # fields = '__all__'
        fields = ['id','compare_code','compare_remark','compare_datetime','compare_user',
                  'cust_code','diagnosis1','diagnosis2','diagnosis1_id','diagnosis2_id']
        extra_kwargs = {'compare_isactive': {'required': False},
                        'diagnosis1_id': {'required': True},
                        'diagnosis2_id': {'required': True},
                        }

    def validate(self, attrs):
        if attrs['diagnosis1_id'].cust_no != attrs['diagnosis2_id'].cust_no or attrs['diagnosis1_id'].site_code != attrs['diagnosis2_id'].site_code:
            raise serializers.ValidationError("diagnosis1_id and diagnosis2_id mismatch")

        if attrs['cust_code'] != attrs['diagnosis1_id'].cust_no.cust_code:
            raise serializers.ValidationError("cust_code mismatch")

        return attrs


class SecuritylevellistSerializer(serializers.ModelSerializer):
    class Meta:
        model = Securitylevellist
        fields = ['id','controlname','controldesc','controlstatus','controlparent']
        read_only_fields = ('id','controlname','controldesc','controlparent')


class DailysalesdataDetailSerializer(serializers.ModelSerializer):
    class Meta:
        model = DailysalesdataDetail
        fields = '__all__'

class DailysalesdataSummarySerializer(serializers.ModelSerializer):
    class Meta:
        model = DailysalesdataSummary
        fields = '__all__'

    # def to_representation(self, data):
    #     data = super(DailysalesdataSummarySerializer,self).to_representation(data)
    #
    #     data['total'] = data.get("masked_nric")
    #
    #     return data